const Rover = require('../src/Rover')

test('when input "L" cardinal should spin to the 90 degrees cardinal anticlockwise ', () => {
    const rover = new Rover()
    rover.move('L')
    expect(rover.getPosition.heading).toBe("W")
    rover.move('L')
    expect(rover.getPosition.heading).toBe("S")
    rover.move('L')
    expect(rover.getPosition.heading).toBe("E")
    rover.move('L')
    expect(rover.getPosition.heading).toBe("N")
    rover.move('L')
    expect(rover.getPosition.heading).toBe("W")
})

test('when input "R" cardinal should spin to the 90 degrees cardinal anticlockwise ', () => {
    const rover = new Rover()
    rover.move('R')
    expect(rover.getPosition.heading).toBe("E")
    rover.move('R')
    expect(rover.getPosition.heading).toBe("S")
    rover.move('R')
    expect(rover.getPosition.heading).toBe("W")
    rover.move('R')
    expect(rover.getPosition.heading).toBe("N")
    rover.move('R')
    expect(rover.getPosition.heading).toBe("E")
})

test('when input either "R" or "L", spin correctly as expected', () => {
    const rover = new Rover()
    rover.move('R')
    expect(rover.getPosition.heading).toBe("E")
    rover.move('L')
    expect(rover.getPosition.heading).toBe("N")
    rover.move('L')
    expect(rover.getPosition.heading).toBe("W")
    rover.move('R')
    expect(rover.getPosition.heading).toBe("N")
    rover.move('L')
    expect(rover.getPosition.heading).toBe("W")
    rover.move('L')
    expect(rover.getPosition.heading).toBe("S")
    rover.move('L')
    expect(rover.getPosition.heading).toBe("E")
    rover.move('L')
    expect(rover.getPosition.heading).toBe("N")
    rover.move('R')
    expect(rover.getPosition.heading).toBe("E")    
})

test('when input is a sequence of "R"s and "L"s should face the correct cardinal direction', () => {
    const rover = new Rover()
    rover.move('RLLLRLLRLLLL')
    expect(rover.getPosition.heading).toBe("S") 
    rover.move('LL')
    expect(rover.getPosition.heading).toBe("N") 
    rover.move('RLRLRLRLRL')
    expect(rover.getPosition.heading).toBe("N") 
    rover.move('RLRLRLRLRLRRR')
    expect(rover.getPosition.heading).toBe("W") 
})

test('"M" means move forward one grid point, and maintain the same heading.', () => {
    const rover = new Rover()
    rover.move('M')
    expect(rover.getPosition.x).toBe(0)
    expect(rover.getPosition.y).toBe(1) 
})